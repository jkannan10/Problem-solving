PROBLEM LINK : https://leetcode.com/problems/majority-element-ii/description/


Brute Force Approch :
Step 1 :  Store all the values in the Map along with the  occurence.
Step 2 : Iterate over the map and find the  n / 3 occurence element.

Optimal Approch :

There can be atmost two ans possible for each test case .Because two elements can have n/3 space .
So alternate the Bayer Moore Algo for that.

BAYER MOORE VOTING ALGORITHM 

Step 1 : Select the candidate for the majority element by traversing into the array.Instead of one select two elements.
Step 2 : Traverse the array when the count is zero  , then make the current element as candidate and whenever the candidate appears increase the cnt else decrese the count.
Step 3 : after selecting the candidate check the occurence of the candidate and it should be greater than n/ 3 else return empty list.


class Solution {
    public List<Integer> majorityElement(int[] nums) {
        int count1 = 0, count2 = 0, candidate1 = Integer.MIN_VALUE, candidate2 = Integer.MIN_VALUE;
        for (int num : nums) {
            if (num == candidate1) {
                count1++;
            } else if (num == candidate2) {
                count2++;
            } else if (count1 == 0) {
                candidate1 = num;
                count1 = 1;
            } else if (count2 == 0) {
                candidate2 = num;
                count2 = 1;
            } else {
                count1--;
                count2--;
            }
        }
        count1 = 0;
        count2 = 0;
        for (int num : nums) {
            if (num == candidate1) count1++;
            if (num == candidate2) count2++;
        }

        List<Integer> result = new ArrayList<>();
        if (count1 > nums.length / 3) {
            result.add(candidate1);
        }
        if (count2 > nums.length / 3) {
            result.add(candidate2);
        }
        return result;
    }
}


