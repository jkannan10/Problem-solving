Step 1 : Find where is the peak .i.e nums[i] > nums[i + 1]
Step 2 : store the index and value .
Step 3 : suppose if the index is -1 then it is already sorted return true.
Step 4 : Iterate from index to n-1 and check whether any peak point is present by checking the value obtained in the previous loop.if it is so return false.
Step 5 : lastly check whether the first element is less than or equal to last element.

class Solution {
    public boolean check(int[] nums) {
         int ind = -1;
         int max = 0;
         int n = nums.length;
         for(int i = 0 ; i < n - 1  ; i++){
            if(nums[i] > nums[i + 1]){
                ind = i;
                max = nums[i];
                break;
            }
         }
         if(ind == -1) return true;
         for(int i = ind + 1 ; i < n - 1 ; i++){
            if(nums[i] > max || nums[i] > nums[i + 1]) return false;
         }
         return nums[n - 1] <= nums[0];
    }
}










Solution 2 :

Step 1 : Make a counter and count the peak of the array . nums[i] > nums[i+ 1] .
Step 2 : If the count is 2 then it is not sorted. return false.
Step 3 : check if the last element is <= to the first element too.
Possible test case : [ 3 , 4 , 5 , 7 , 1 , 4] 
There is only one peak point " 7 ". but [1 , 4 , 3,  4  , 5 , 7] is not sorted so check the last element too.

class Solution {
    public boolean check(int[] nums) {
        for(int i = 0 ; i < n ; i++){
            if(nums[i] > nums[(i+ 1) % n]) cnt++;
        }
        return cnt <= 1;
    }
}

